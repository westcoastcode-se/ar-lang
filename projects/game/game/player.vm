//import "engine"

type RegisterExtension func (c *Component, s *Scene)
type UnregisterExtension func (c *Component, s *Scene)

type Registrator struct {
	Register RegisterExtension
	Unregister UnregisterExtension
}

type Component struct {
	Registrator *Registrator
}

type MovePlayerComponent struct {
	Component

	// Linked List node
	updateAwareNode *list.Node<engine.IUpdateAware>
}

// Inherits from IUpdateAware
func (c *MovePlayerComponent) Update(dt float32, sfT float64) {
	//
}

// Variable in the global scope
var MovePlayerComponentRegistrator = new Registrator {
	Register: func (c *Component, s *Scene) {
		var mpc = static_cast[*MovePlayerComponent](c)
		mpc.updateAwareNode = s.AddUpdateAware(mpc)
	},
	Unregister: (c *Component, s *Scene) {
		var mpc = static_cast[*MovePlayerComponent](c)
		s.RemoveUpdateAware(mpc, mpc.updateAwareNode)
		mpc.updateAwareNode = nil
	}
}

var c = new MovePlayerComponent {
	Component: {
		Registrator = MovePlayerComponentRegistrator
	}
}
s.Add(c)

func (s *Scene) Add(c *Component) {
	c.Registrator.Register(c, s)
}
