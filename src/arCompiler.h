#ifndef _arCompiler_H_
#define _arCompiler_H_

#include "arMessage.h"
#include "arBuilder.h"
#include "compiler/source_code.h"
#include "compiler/symbol.h"
#include "compiler/syntax_tree.h"
#include "compiler/message_codes.h"

// The entry point for the compiler of ar-lang
typedef struct arCompiler
{
	// Messages raised by the compiler
	arMessages messages;
	// A panic message. This is normally used for when the device is out of memory
	arMessage panic;
	// Sources used by the compiler
	arC_source_code* sources;
	arC_source_code* sources_end;
	// The root node where everything originates from
	arC_syntax_tree_root* root_node;
	// Packages generated during the compilation time
	arC_package* packages;
	arC_package* packages_end;
	// Pipeline and builder for generating the machine code
	arBuilder* pipeline;
} arCompiler;

// Create a new compiler for the ar-lang language
ARLANG_API arCompiler* arCompiler_new();

// Destroy the compiler
ARLANG_API void arCompiler_destroy(arCompiler* ptr);

// Add new source code. Returns FALSE if an message is raised that's considered an ERROR
ARLANG_API BOOL arCompiler_add_source_code(arCompiler* c, arC_source_code* source);

// Raise a compiler message
ARLANG_API void arCompiler_raise_message(arCompiler* c, arMessage* msg);

// Compile the syntax tree generated by all added source codes turning them into bytecode
// that the virtual machine understands. If this function returns NULL then a message is can be
// extracted from the messages container or the panic message.
ARLANG_API arByte* arCompiler_compile(arCompiler* c);

#endif
